#summary Getting Started with implementing SocialAuth in Seam Application

= Getting Started =

== Prerequisites ==
Authenticating using the external oAuth providers requires that we register our application with the providers and obtain a key/secret from them that will be configured in our application. So following steps are needed to be set up before we can begin.

  * Public domain - You will need a public domain for testing. You should have a public domain because most of the providers require a public domain to be specified when you register an application with them. You can do some testing on your development machine but it will be quite limited.

== Obtain consumer keys and secrets ==
This step is very important and the library will NOT work without this.

  * Consumer key and secret - Get your consumer keys and secrets by registering with any provider given below. OpenID does not require this step.
    # Google [Google (show screenshot)] - http://code.google.com/apis/accounts/docs/RegistrationForWebAppsAuto.html 
    # Yahoo [Yahoo (show screenshot)] - https://developer.apps.yahoo.com/dashboard/createKey.html
    # Twitter  - http://twitter.com/apps
    # Facebook  - http://www.facebook.com/developers/apps.php
    # Hotmail [Hotmail (show screenshot)] - http://msdn.microsoft.com/en-us/library/cc287659.aspx
  * Create a properties like the sample [SampleProperties oauth_consumer.properties] using the consumer key and secrets obtained above. This file should be included in your classpath, for example WEB-INF/classes directory

== Download the jar ==
  # Download the [http://socialauth.googlecode.com/files/socialauth-1.0-beta2.jar socialauth-1.0-beta2.jar] 
  # Download the [http://socialauth.googlecode.com/files/dependencies.zip dependencies]
  # Include all the jars in your project

== Implementation ==

Socialauth.jar library consists of just two fundamental classes which support JBoss seam application. !SocialAuth bean is the seam component responsible for calling the corresponding requested provider like facebook, yahoo or google. !SocialAuthPhaseListener is the listener that processes the redirection from a provider.

 # Add socialauth component definition in your seam component.xml file
{{{
<component name="socialauth" class="org.brickred.socialauth.SocialAuth"/>
}}}
 # Add the view in your web.xml which will be displayed after successful authentication using SocialAuth
{{{
<context-param>
        <param-name>successUrl</param-name>
        <param-value>/success.xhtml</param-value>
 </context-param>
}}}
 # Register the phase listener in faces-config.xml
{{{
<lifecycle>
        <phase-listener>org.brickred.socialauth.SocialAuthPhaseListener</phase-listener>
</lifecycle>
}}}
 # Inject !SocialAuth Component
{{{
@In(create = true)
SocialAuth socialauth;
}}}
 # Pass the provider you would like to use, for example, "facebook", "yahoo" or any other. This may happen by detecting which icon the user clicked on, or by just passing a static string containing provider id if you are using just a single provider
{{{
//get success url from context param
ExternalContext context = javax.faces.context.FacesContext.getCurrentInstance().getExternalContext();
String viewUrl = context.getInitParameter("successUrl");

//set success URL in socialauth component
socialauth.setViewUrl(viewUrl);
 
//set provider id in socialauth component
socialauth.setId("facebook");
}}}
 # Create Success view page success.xhtml, it renders on successful login and displays various information about the logged in user.<br/><br/>   You can get profile object and contact list to display by using the socialauth bean as follows.
{{{
//profile object
socialauth.profile

//get contacts list
socialauth.contactList
}}}

        