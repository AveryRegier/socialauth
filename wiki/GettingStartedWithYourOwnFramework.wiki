#summary Getting Started with implementing SocialAuth in your own framework or in servlet application.

= Getting Started =

== Prerequisites ==
Authenticating using the external oAuth providers requires that we register our application with the providers and obtain a key/secret from them that will be configured in our application. So following steps are needed to be set up before we can begin.

 * Public domain - You will need a public domain for testing. You should have a public domain because most of the providers require a public domain to be specified when you register an application with them. You can do some testing on your development machine but it will be quite limited.

== Obtain consumer keys and secrets ==
This step is very important and the library will NOT work without this.

 * Consumer key and secret - Get your consumer keys and secrets by registering with any provider given below. OpenID does not require this step


== Download the jar ==
  # Download the [http://socialauth.googlecode.com/files/socialauth-1.1-beta1.jar socialauth-1.1-beta1.jar] 
  # Download the [http://socialauth.googlecode.com/files/dependencies-1.1.zip dependencies] Please note that you may not need all of them - for example jboss-seam.jar is not needed if you are building a Struts application. jsf-api is not needed if your application is JSP based.
  # Include all the jars in your project

== Implementation ==

Using the socialauth.jar consists of three main steps:

  * Create a properties like the sample [SampleProperties oauth_consumer.properties] using the consumer key and secrets obtained above. This file should be included in your classpath. 

  * User chooses provider - Create a page where you ask the user to choose a provider. When the user clicks on a provider, you should create an instance of the !AuthProvider in your handling code and redirect to the URL obtained by calling the function getLoginRedirectURL(). Remember to store it into the session.

{{{
  // id can have values "facebook", "twitter", "yahoo" etc. or the OpenID URL
  provider = AuthProviderFactory.getInstance(id);

  // URL of YOUR application which will be called after authentication
  String returnToUrl = "http://opensource.brickred.com/socialauthdemo/socialAuthSuccessAction.do";

  // Provider URL to which you should redirect for authentication
  String url = provider.getLoginRedirectURL(returnToUrl);

  // Store in session
  session.setAttribute("SocialAuth", provider);
}}}

  * Provider redirects back - When you redirect the user to the provider URL, the provider would validate the user, either by asking for username / password or by existing session and will then redirect the user back to you application URL mentioned above, i.e. "http://opensource.brickred.com/socialauthdemo/socialAuthSuccessAction.do". Now you can obtain any profile information using the following code

{{{

  // get the provider from session
  AuthProvider provider = (AuthProvider)session.getAttribute("SocialAuth");

  // verify the authentication
  Profile p = provider.verifyResponse(request);

  // you can obtain profile information
  System.out.println(p.getFirstName());

  // OR also obtain list of contacts
  List<Contact> contactsList = provider.getContactList();
		
}}}

That is all you have to do, really. But this is just a code snippet that we put in to show you how this works.